{
  "openapi": "3.1.0",
  "info": {
    "title": "Bendy BethC Figma API",
    "description": "Optimized API to fetch Figma file data for Bendy BethC website design system. Handles large files efficiently with multiple fetch modes.",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://bendybethc.com"
    }
  ],
  "paths": {
    "/api/figma": {
      "get": {
        "summary": "Get Bendy BethC Figma design system data",
        "description": "Fetches design system data from the Bendy BethC Figma file. Use type=metadata for large files, type=node for specific components, or type=full for complete data.",
        "operationId": "getBendyBethCFigmaData",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "description": "The Figma file ID. For Bendy BethC website, always use: Jj89xqSTRiTU2P4qEw5zUu",
            "schema": {
              "type": "string",
              "default": "Jj89xqSTRiTU2P4qEw5zUu",
              "enum": ["Jj89xqSTRiTU2P4qEw5zUu"]
            },
            "example": "Jj89xqSTRiTU2P4qEw5zUu"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type of data to fetch. Use 'metadata' for large files (recommended), 'node' for specific components, 'images' for image references, or 'full' for complete data.",
            "schema": {
              "type": "string",
              "default": "metadata",
              "enum": ["metadata", "node", "images", "full"]
            },
            "example": "metadata"
          },
          {
            "name": "nodeId",
            "in": "query",
            "required": false,
            "description": "Specific node ID when using type=node. Get this from Figma URL when selecting a component.",
            "schema": {
              "type": "string"
            },
            "example": "1:2"
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "description": "Limit nesting depth for large files when using type=full. Use 1-5, default is 1.",
            "schema": {
              "type": "string",
              "default": "1",
              "enum": ["1", "2", "3", "4", "5"]
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Figma data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Figma data based on type parameter - metadata, node data, images, or full file data"
                    },
                    "fileId": {
                      "type": "string",
                      "example": "Jj89xqSTRiTU2P4qEw5zUu"
                    },
                    "nodeId": {
                      "type": "string",
                      "description": "Node ID if type=node was used"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of data fetched",
                      "example": "metadata"
                    },
                    "depth": {
                      "type": "string",
                      "description": "Depth limit if type=full was used"
                    },
                    "timestamp": {
                      "type": "string",
                      "example": "2024-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "413": {
            "description": "File too large - use type=metadata or type=node instead"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/github": {
      "get": {
        "summary": "Get GitHub repository content",
        "description": "Fetches files, directories, or specific content from GitHub repositories. Useful for accessing code, documentation, or project files.",
        "operationId": "getGitHubContent",
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "description": "GitHub username or organization name",
            "schema": {
              "type": "string"
            },
            "example": "facebook"
          },
          {
            "name": "repo",
            "in": "query",
            "required": true,
            "description": "Repository name",
            "schema": {
              "type": "string"
            },
            "example": "react"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "File or directory path within the repository. Leave empty for root directory.",
            "schema": {
              "type": "string"
            },
            "example": "README.md"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "description": "Branch name to fetch from. Defaults to 'main'.",
            "schema": {
              "type": "string",
              "default": "main"
            },
            "example": "main"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved GitHub content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "GitHub content with decoded file contents. For files: includes decoded 'content' field with readable text. For directories: includes array of files with metadata and download URLs."
                    },
                    "owner": {
                      "type": "string",
                      "example": "facebook"
                    },
                    "repo": {
                      "type": "string",
                      "example": "react"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path that was requested"
                    },
                    "branch": {
                      "type": "string",
                      "example": "main"
                    },
                    "isFile": {
                      "type": "boolean",
                      "description": "True if the response contains a single file with decoded content"
                    },
                    "isDirectory": {
                      "type": "boolean", 
                      "description": "True if the response contains a directory listing"
                    },
                    "timestamp": {
                      "type": "string",
                      "example": "2024-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters (owner, repo)"
          },
          "404": {
            "description": "Repository, file, or path not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}