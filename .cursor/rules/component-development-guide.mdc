---
alwaysApply: true
---

# Component Development Guide for CSS Design Systems

## COMPONENT ARCHITECTURE PRINCIPLES

### Component Structure
Every component must follow this structure:
1. **Base styles** - default appearance using semantic tokens
2. **State styles** - hover, focus, active, disabled states
3. **Size variants** - small, medium, large if applicable
4. **Theme support** - light/dark mode compatibility
5. **Accessibility** - proper focus indicators and ARIA support

### Component File Organization
```
src/components/
├── button.css          # Button component
├── chip.css           # Chip component
├── input.css          # Input component
├── card.css           # Card component
└── icon.css           # Icon system (shared)
```

## COMPONENT DEVELOPMENT WORKFLOW

### Step 1: Component Planning
Before writing any CSS:
1. **Identify required tokens** from design system
2. **Plan component variants** (sizes, states, themes)
3. **Define component API** (CSS classes, modifiers)
4. **Consider accessibility requirements**

### Step 2: Base Implementation
```css
/* Component base styles - semantic tokens only */
.bb-button {
  /* Layout */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--bb-space-2);
  
  /* Sizing */
  padding: var(--bb-button-padding);
  min-height: var(--bb-button-height);
  border-radius: var(--bb-button-radius);
  
  /* Typography */
  font-family: var(--bb-font-family-base);
  font-size: var(--bb-button-font-size);
  font-weight: var(--bb-button-font-weight);
  line-height: var(--bb-button-line-height);
  
  /* Colors */
  background: var(--bb-button-bg);
  color: var(--bb-button-text);
  border: var(--bb-button-border);
  
  /* Interaction */
  cursor: pointer;
  transition: var(--bb-transition-fast);
  
  /* Accessibility */
  text-decoration: none;
  white-space: nowrap;
}
```

### Step 3: State Implementation
```css
/* Hover state */
.bb-button:hover {
  background: var(--bb-button-bg-hover);
  color: var(--bb-button-text-hover);
  border: var(--bb-button-border-hover);
}

/* Focus state - CRITICAL for accessibility */
.bb-button:focus-visible {
  outline: 2px solid var(--bb-color-focus);
  outline-offset: 2px;
}

/* Active state */
.bb-button:active {
  background: var(--bb-button-bg-active);
  color: var(--bb-button-text-active);
  border: var(--bb-button-border-active);
}

/* Disabled state */
.bb-button:disabled {
  background: var(--bb-button-bg-disabled);
  color: var(--bb-button-text-disabled);
  border: var(--bb-button-border-disabled);
  cursor: not-allowed;
  opacity: var(--bb-opacity-disabled);
}
```

### Step 4: Variant Implementation
```css
/* Primary variant */
.bb-button--primary {
  background: var(--bb-button-primary-bg);
  color: var(--bb-button-primary-text);
  border: var(--bb-button-primary-border);
}

.bb-button--primary:hover {
  background: var(--bb-button-primary-bg-hover);
  color: var(--bb-button-primary-text-hover);
  border: var(--bb-button-primary-border-hover);
}

/* Secondary variant */
.bb-button--secondary {
  background: var(--bb-button-secondary-bg);
  color: var(--bb-button-secondary-text);
  border: var(--bb-button-secondary-border);
}

/* Destructive variant */
.bb-button--destructive {
  background: var(--bb-button-destructive-bg);
  color: var(--bb-button-destructive-text);
  border: var(--bb-button-destructive-border);
}
```

### Step 5: Size Variants
```css
/* Small size */
.bb-button--sm {
  padding: var(--bb-button-padding-sm);
  min-height: var(--bb-button-height-sm);
  font-size: var(--bb-button-font-size-sm);
  border-radius: var(--bb-button-radius-sm);
}

/* Large size */
.bb-button--lg {
  padding: var(--bb-button-padding-lg);
  min-height: var(--bb-button-height-lg);
  font-size: var(--bb-button-font-size-lg);
  border-radius: var(--bb-button-radius-lg);
}
```

## COMPONENT TESTING PROTOCOL

### Visual Testing Checklist
- [ ] **Base appearance** matches design specifications
- [ ] **All states** (hover, focus, active, disabled) work correctly
- [ ] **All variants** (primary, secondary, destructive) render properly
- [ ] **All sizes** (sm, md, lg) scale appropriately
- [ ] **Theme switching** works in both light and dark modes
- [ ] **Responsive behavior** adapts to different screen sizes
- [ ] **Content flexibility** handles varying text lengths

### Accessibility Testing
- [ ] **Keyboard navigation** works with Tab key
- [ ] **Focus indicators** are visible and meet contrast requirements
- [ ] **Screen reader** compatibility (proper ARIA attributes)
- [ ] **Color contrast** meets WCAG AA standards
- [ ] **Touch targets** are at least 44px for mobile

### Cross-Browser Testing
- [ ] **Chrome/Edge** - latest version
- [ ] **Firefox** - latest version
- [ ] **Safari** - latest version
- [ ] **Mobile browsers** - iOS Safari, Chrome Mobile

## COMPONENT DOCUMENTATION

### Component Recipe Template
```markdown
## Button Component

### Tokens Used
- `--bb-button-bg` - Background color
- `--bb-button-text` - Text color
- `--bb-button-padding` - Internal spacing
- `--bb-button-height` - Minimum height
- `--bb-button-radius` - Border radius
- `--bb-button-font-size` - Text size
- `--bb-button-font-weight` - Text weight

### Variants
- `.bb-button--primary` - Primary action button
- `.bb-button--secondary` - Secondary action button
- `.bb-button--destructive` - Destructive action button

### Sizes
- `.bb-button--sm` - Small button
- `.bb-button--lg` - Large button

### States
- `:hover` - Hover state
- `:focus-visible` - Focus state
- `:active` - Active state
- `:disabled` - Disabled state

### Usage Examples
```html
<!-- Primary button -->
<button class="bb-button bb-button--primary">Save Changes</button>

<!-- Secondary button with icon -->
<button class="bb-button bb-button--secondary">
  <svg class="bb-icon bb-icon--sm">...</svg>
  Cancel
</button>

<!-- Destructive button -->
<button class="bb-button bb-button--destructive">Delete</button>
```

### Accessibility Notes
- Uses `focus-visible` for keyboard focus indicators
- Supports screen readers with proper button semantics
- Meets WCAG AA contrast requirements
- Touch-friendly minimum size (44px)
```

## COMPONENT PATTERNS

### Pattern 1: Icon + Text Components
```css
.bb-button--with-icon {
  display: inline-flex;
  align-items: center;
  gap: var(--bb-space-2);
}

.bb-button--with-icon .bb-icon {
  flex-shrink: 0;
  color: inherit;
}

.bb-button--icon-only {
  padding: var(--bb-space-2);
  min-width: var(--bb-button-height);
  justify-content: center;
}
```

### Pattern 2: Responsive Components
```css
.bb-card {
  display: flex;
  flex-direction: column;
  gap: var(--bb-space-4);
  padding: var(--bb-space-4);
  border-radius: var(--bb-card-radius);
  background: var(--bb-card-bg);
  border: var(--bb-card-border);
}

/* Responsive behavior without media queries */
.bb-card__content {
  flex: 1;
  min-width: 0; /* Prevents flex item from overflowing */
}

.bb-card__actions {
  display: flex;
  gap: var(--bb-space-2);
  flex-wrap: wrap;
  justify-content: flex-end;
}
```

### Pattern 3: Form Components
```css
.bb-input {
  display: block;
  width: 100%;
  padding: var(--bb-input-padding);
  border: var(--bb-input-border);
  border-radius: var(--bb-input-radius);
  background: var(--bb-input-bg);
  color: var(--bb-input-text);
  font-family: var(--bb-font-family-base);
  font-size: var(--bb-input-font-size);
  line-height: var(--bb-input-line-height);
  transition: var(--bb-transition-fast);
}

.bb-input:focus {
  outline: none;
  border-color: var(--bb-color-focus);
  box-shadow: 0 0 0 2px var(--bb-color-focus-ring);
}

.bb-input:disabled {
  background: var(--bb-input-bg-disabled);
  color: var(--bb-input-text-disabled);
  cursor: not-allowed;
}

.bb-input--error {
  border-color: var(--bb-color-error);
}

.bb-input--error:focus {
  border-color: var(--bb-color-error);
  box-shadow: 0 0 0 2px var(--bb-color-error-ring);
}
```

## COMPONENT COMPOSITION

### Compound Components
```css
/* Card component with header, content, and actions */
.bb-card {
  display: flex;
  flex-direction: column;
  background: var(--bb-card-bg);
  border-radius: var(--bb-card-radius);
  border: var(--bb-card-border);
  overflow: hidden;
}

.bb-card__header {
  padding: var(--bb-card-header-padding);
  background: var(--bb-card-header-bg);
  border-bottom: var(--bb-card-header-border);
}

.bb-card__content {
  flex: 1;
  padding: var(--bb-card-content-padding);
}

.bb-card__actions {
  display: flex;
  gap: var(--bb-space-2);
  padding: var(--bb-card-actions-padding);
  background: var(--bb-card-actions-bg);
  border-top: var(--bb-card-actions-border);
  justify-content: flex-end;
}
```

### Component Modifiers
```css
/* Card variants */
.bb-card--elevated {
  box-shadow: var(--bb-shadow-elevated);
  border: var(--bb-card-border-elevated);
}

.bb-card--outlined {
  border: var(--bb-card-border-outlined);
  box-shadow: none;
}

.bb-card--filled {
  background: var(--bb-card-bg-filled);
  border: var(--bb-card-border-filled);
}
```

## COMPONENT MAINTENANCE

### Adding New Components
1. **Create component file** in `src/components/`
2. **Define required tokens** in design system
3. **Implement base styles** using semantic tokens
4. **Add all states** (hover, focus, active, disabled)
5. **Create variants** if needed
6. **Test thoroughly** in both themes
7. **Document component** with usage examples
8. **Update demo page** with examples

### Updating Existing Components
1. **Identify required changes** in design system
2. **Update token references** if needed
3. **Test all variants and states**
4. **Verify theme compatibility**
5. **Update documentation**
6. **Test in demo page**

### Removing Components
1. **Remove component file**
2. **Remove from demo page**
3. **Remove unused tokens** if no longer needed
4. **Update documentation**
5. **Test remaining components**

## COMPONENT QUALITY GATES

### Pre-Development Checklist
- [ ] **Design specifications** are clear and complete
- [ ] **Required tokens** are defined in design system
- [ ] **Component variants** are planned
- [ ] **Accessibility requirements** are understood
- [ ] **Responsive behavior** is defined

### Development Checklist
- [ ] **Semantic tokens only** - no hardcoded values
- [ ] **All states implemented** - hover, focus, active, disabled
- [ ] **Theme support** - works in light and dark modes
- [ ] **Accessibility** - proper focus indicators and ARIA
- [ ] **Responsive** - adapts to different screen sizes
- [ ] **Flexible** - handles varying content lengths

### Post-Development Checklist
- [ ] **Visual testing** - matches design specifications
- [ ] **Cross-browser testing** - works in all target browsers
- [ ] **Accessibility testing** - meets WCAG standards
- [ ] **Documentation** - complete with examples
- [ ] **Demo integration** - added to demo page
- [ ] **Code review** - follows project standards

---

## CRITICAL COMPONENT RULES

1. **Use semantic tokens only** - never hardcoded values
2. **Implement all states** - hover, focus, active, disabled
3. **Test in both themes** - light and dark mode compatibility
4. **Ensure accessibility** - proper focus indicators and ARIA
5. **Document thoroughly** - usage examples and token references
6. **Test responsively** - adapts to different screen sizes
7. **Maintain consistency** - follow established patterns
8. **Quality gates** - don't proceed until current component is perfect