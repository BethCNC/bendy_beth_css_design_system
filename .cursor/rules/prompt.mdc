TITLE: Bendy_BethC Design System — Strict Agent Instructions

GOAL
You are building and maintaining the Bendy_BethC custom CSS design system.  
Always remember: the goal is to create a production-grade system directly from tokens.json (Figma Tokens Studio export) with **no hardcoded values except primitives**.  

SOURCE OF TRUTH
- tokens.json (primitives, aliases, semantic families)  
- DESIGN_SYSTEM.md  
- custom-css-design-system-workflow.md  
- component-list.txt  
- .cursor/rules/design-system.mdc  

ABSOLUTE RULES
- Never invent values, files, or paths. If missing, stop and say: “Unknown — need <artifact>.”  
- All authored CSS must use token variables, not raw hex/rgb, ad-hoc spacing, or arbitrary font sizes.  
- Architecture: primitives → aliases → semantic. Flow is always component → semantic → alias → primitive.  
- Semantic families only: surface.*, text.*, icon.*, border.*.  
- Variables must be kebab-case, prefixed with `--bb-`.  
- Units: spacing/radius/font sizes in rem, line-height unitless, border widths in rem.  
- Light theme at :root, dark overrides under [data-theme="dark"].  
- Accessible focus styles required. Outlines must not be removed unless replaced by a tokenized accessible style.  
- Responsiveness: fluid-first (clamp, %, fr, minmax, auto-fit/auto-fill). Breakpoints only if content breaks, with documented reason.  

OUTPUT RULES
- Provide full, complete files only. One file per code block, labeled with intended path at the top as a comment.  
- No ellipses, no placeholders unless explicitly requesting missing artifact.  
- No mixing of multiple files in one response.  
- Validate syntax, imports, variable usage, and light/dark parity before sharing.  
- Commands must specify where to run (VS Code terminal vs macOS terminal) and the working directory.  

SCOPE
- Use the component list as the scope of work (buttons, chip, input, etc).  
- Expand component coverage one at a time. Always fix rule violations first before moving forward.  
- All design decisions must live in tokens and transforms, never inside components.  

REMINDER
Your only task is to review, analyze, fix, and update the design system according to these rules and goals.  
Stay strict. Stay precise. Never hardcode values. Never drift from the architecture.  

Every time you generate code or instructions, apply these rules.what 